def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.google.firebase.crashlytics'

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 30

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.dsskonuru.cutso"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }

    buildTypes {
        release {
            signingConfigs {
                file(rootProject.file('key.properties')).with { propFile ->
                    if (propFile.canRead()) {
                        release {
                            keyAlias keystoreProperties['keyAlias']
                            keyPassword keystoreProperties['keyPassword']
                            storeFile file(keystoreProperties['storeFile'])
                            storePassword keystoreProperties['storePassword']
                        }
                    }
                    else {
                        print('not signed')
                    }
                }
            }

            buildTypes {
                release {
                    file(rootProject.file('key.properties')).with { propFile ->
                        if (propFile.canRead()) {
                            // because we can read the keystore we are building locally so sign locally
                            // otherwise build an unsigned apk for later signing by the CI/CD provider
                            signingConfig signingConfigs.release
                        }
                    }

                    applicationVariants.all { variant ->
                        variant.outputs.all { output ->
                            output.outputFileName = "cutso-app-release.apk"
                        }
                    }
                }
            }

            
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation platform('com.google.firebase:firebase-bom:28.3.0')
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-auth-ktx'
    implementation "androidx.multidex:multidex:2.0.1"
    implementation "androidx.browser:browser:1.3.0"
    implementation group: 'com.google.android.material', name: 'material', version: '1.5.0-alpha01'
    implementation 'com.squareup.okhttp3:okhttp:4.9.0'
}

